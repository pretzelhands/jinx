#!/usr/bin/env bash

#
# General setup
#

JINX_VERSION="0.3.1"
JINX_RELEASE_URL="https://api.github.com/repos/pretzelhands/jinx/releases/latest"

#
# Important directories and files
#

JINX_TMP="/tmp/jinx"
JINX_ETC="/usr/local/etc/jinx"
JINX_BIN="/usr/local/bin/jinx"

# Configuration setup
JINX_CONFIG_FOLDER="$HOME/.jinx"
JINX_CONFIG_FILE="$JINX_CONFIG_FOLDER/config"

#
# Include all modules
# Each piece of functionality has its distinct module
#

. "$JINX_ETC/modules/10-jinx-init.sh"
. "$JINX_ETC/modules/20-jinx-formatting.sh"
. "$JINX_ETC/modules/30-jinx-helpers.sh"
. "$JINX_ETC/modules/40-jinx-config.sh"
. "$JINX_ETC/modules/50-jinx-versioning.sh"
. "$JINX_ETC/modules/60-jinx-site.sh"
. "$JINX_ETC/modules/70-jinx-nginx.sh"

#
# Automatic versioning check
# Happens once a day
#

jinx_check_version

#
# Command processing loop
# Builds up to the correct functions to call
#

# We require at least one command
if [[ -z "$1" ]]
then
    echo ""
    jinx_help
    exit 0
fi

# Loop through each passed argument (can be --something or just "something")
for arg in "$@"
do
    case $arg in
        # Utilities
        help | -h | --help)
            jinx_help
            exit 0
        ;;

        # Configuration
        config)
            if [[ -z "$2" ]]
            then
                echo -e "${COLOR_RED}Failure.${FORMAT_END} Please provide a key to fetch or a key and value to set."
                exit 1
            fi

            if [[ -z "$3" ]]
            then
                jinx_config_get "$2"
            elif [[ ! -z "$3" ]]
            then
                jinx_config_set "$2" "$3"
            fi
        ;;

        # Versioning
        update)
            jinx_update_version
        ;;
        uninstall)
            jinx_uninstall $2
        ;;
        version | -v | --version)
            echo -e "$JINX_VERSION"
            exit 0
        ;;

        # Site management
        site)
            if [[ "$2" == "activate" ]]
            then
                jinx_site_activate $3 $4
            elif [[ "$2" == "deactivate" ]]
            then
                jinx_site_deactivate $3 $4
            elif [[ "$2" == "edit" ]]
            then
                jinx_site_edit $3
            elif [[ "$2" == "create" ]]
            then
                jinx_site_create $3 $4 $5 $6
            elif [[ "$2" == "delete" ]]
            then
                jinx_site_delete $3 $4
            else
                echo -e "${COLOR_RED}Please provide a subcommand.${FORMAT_END}\n"
                jinx_help
                exit 1
            fi
        ;;

        # Service management
        check | -t | --check)
            jinx_nginx_service "check"
        ;;
        start)
            jinx_nginx_service "start"
        ;;
        stop)
            jinx_nginx_service "stop"
        ;;
        reload)
            jinx_nginx_service "reload"
        ;;
        restart)
            jinx_nginx_service "restart"
        ;;
        logs)
            jinx_nginx_logs
        ;;

        # When everything else fails
        *)
            echo -e "${COLOR_RED}Command was not recognized.${FORMAT_END}\n"

            exit 1
        ;;
    esac
done
